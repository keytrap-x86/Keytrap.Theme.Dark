<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:converter="clr-namespace:Keytrap.Theme.Dark.Tools.Converter" xmlns:themes="clr-namespace:Keytrap.Theme.Dark.Themes" xmlns:i="http://schemas.microsoft.com/xaml/behaviors" xmlns:kt="clr-namespace:Keytrap.Theme.Dark.Controls">
  <converter:Boolean2BooleanReConverter x:Key="Boolean2BooleanReConverter" />
  <converter:Boolean2VisibilityReConverter x:Key="Boolean2VisibilityReConverter" />
  <converter:BooleanArr2VisibilityConverter x:Key="BooleanArr2VisibilityConverter" />
  <converter:String2VisibilityConverter x:Key="String2VisibilityConverter" />
  <converter:String2VisibilityReConverter x:Key="String2VisibilityReConverter" />
  <BooleanToVisibilityConverter x:Key="Boolean2VisibilityConverter" />
  <converter:TreeViewItemMarginConverter x:Key="TreeViewItemMarginConverter" />
  <converter:Color2HexStringConverter x:Key="Color2HexStringConverter" />
  <converter:Object2BooleanConverter x:Key="Object2BooleanConverter" />
  <converter:Boolean2StringConverter x:Key="Boolean2StringConverter" />
  <converter:Int2StringConverter x:Key="Int2StringConverter" />
  <converter:BorderClipConverter x:Key="BorderClipConverter" />
  <converter:BorderCircularClipConverter x:Key="BorderCircularClipConverter" />
  <converter:BorderCircularConverter x:Key="BorderCircularConverter" />
  <converter:Object2VisibilityConverter x:Key="Object2VisibilityConverter" />
  <converter:Object2VisibilityReConverter x:Key="Object2VisibilityReConverter" />
  <converter:RectangleCircularConverter x:Key="RectangleCircularConverter" />
  <converter:ThicknessSplitConverter x:Key="ThicknessSplitConverter" />
  <converter:CornerRadiusSplitConverter x:Key="CornerRadiusSplitConverter" />
  <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
  <converter:Double2GridLengthConverter x:Key="Double2GridLengthConverter" />
  <converter:Object2StringConverter x:Key="Object2StringConverter" />
  <FontFamily x:Key="Whitney">pack://application,,,/Keytrap.Theme.Dark;Component/Fonts/#Whitney</FontFamily>
  <SolidColorBrush x:Key="LightPrimaryBrush" o:Freeze="True" Color="{DynamicResource PrimaryLightColor}" />
  <SolidColorBrush x:Key="PrimaryBrush" o:Freeze="True" Color="{DynamicResource PrimaryColor}" />
  <SolidColorBrush x:Key="DarkPrimaryBrush" o:Freeze="True" Color="{DynamicResource PrimaryDarkColor}" />
  <SolidColorBrush x:Key="LightSuccessBrush" o:Freeze="True" Color="{DynamicResource SuccessLightColor}" />
  <SolidColorBrush x:Key="SuccessBrush" o:Freeze="True" Color="{DynamicResource SuccessColor}" />
  <SolidColorBrush x:Key="DarkSuccessBrush" o:Freeze="True" Color="{DynamicResource SuccessDarkColor}" />
  <SolidColorBrush x:Key="LightInfoBrush" o:Freeze="True" Color="{DynamicResource InfoLightColor}" />
  <SolidColorBrush x:Key="InfoBrush" o:Freeze="True" Color="{DynamicResource InfoColor}" />
  <SolidColorBrush x:Key="DarkInfoBrush" o:Freeze="True" Color="{DynamicResource InfoDarkColor}" />
  <SolidColorBrush x:Key="LightErrorBrush" o:Freeze="True" Color="{DynamicResource ErrorLightColor}" />
  <SolidColorBrush x:Key="ErrorBrush" o:Freeze="True" Color="{DynamicResource ErrorColor}" />
  <SolidColorBrush x:Key="DarkErrorBrush" o:Freeze="True" Color="{DynamicResource ErrorDarkColor}" />
  <SolidColorBrush x:Key="LightWarningBrush" o:Freeze="True" Color="{DynamicResource WarningLightColor}" />
  <SolidColorBrush x:Key="WarningBrush" o:Freeze="True" Color="{DynamicResource WarningColor}" />
  <SolidColorBrush x:Key="DarkWarningBrush" o:Freeze="True" Color="{DynamicResource WarningDarkColor}" />
  <SolidColorBrush x:Key="PrimaryTextBrush" o:Freeze="True" Color="{DynamicResource PrimaryTextColor}" />
  <SolidColorBrush x:Key="SecondaryTextBrush" o:Freeze="True" Color="{DynamicResource SecondaryTextColor}" />
  <SolidColorBrush x:Key="ThirdlyTextBrush" o:Freeze="True" Color="{DynamicResource ThirdlyTextColor}" />
  <SolidColorBrush x:Key="LightBackgroundBrush" o:Freeze="True" Color="{DynamicResource BackgroundLightColor}" />
  <SolidColorBrush x:Key="BackgroundBrush" o:Freeze="True" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="DarkBackgroundBrush" o:Freeze="True" Color="{DynamicResource BackgroundDarkColor}" />
  <SolidColorBrush x:Key="ControlBorderBrush" o:Freeze="True" Color="{DynamicResource ControlBorderColor}" />
  <SolidColorBrush x:Key="ControlDisabledBorderBrush" o:Freeze="True" Color="{DynamicResource ControlDisabledBorderColor}" />
  <SolidColorBrush x:Key="ControlReadOnlyBorderBrush" o:Freeze="True" Color="{DynamicResource ControlReadOnlyBorderColor}" />
  <SolidColorBrush x:Key="ControlHoveredBorderBrush" o:Freeze="True" Color="{DynamicResource ControlHoveredBorderColor}" />
  <SolidColorBrush x:Key="ControlFocusedBorderBrush" o:Freeze="True" Color="{DynamicResource ControlFocusedBorderColor}" />
  <SolidColorBrush x:Key="ControlForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlForegroundColor}" />
  <SolidColorBrush x:Key="ControlDisabledForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlDisabledForegroundColor}" />
  <SolidColorBrush x:Key="ControlReadOnlyForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlReadOnlyForegroundColor}" />
  <SolidColorBrush x:Key="ControlHoveredForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlHoveredForegroundColor}" />
  <SolidColorBrush x:Key="ControlFocusedForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlFocusedForegroundColor}" />
  <SolidColorBrush x:Key="ControlBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlBackgroundColor}" />
  <SolidColorBrush x:Key="ControlDisabledBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlDisabledBackgroundColor}" />
  <SolidColorBrush x:Key="ControlReadOnlyBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlReadOnlyBackgroundColor}" />
  <SolidColorBrush x:Key="ControlHoveredBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlHoveredBackgroundColor}" />
  <SolidColorBrush x:Key="ControlFocusedBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlFocusedBackgroundColor}" />
  <DropShadowEffect x:Key="EffectShadow1" o:Freeze="True" BlurRadius="5" Direction="270" Opacity=".2" RenderingBias="Performance" ShadowDepth="1" Color="{StaticResource EffectShadowColor}" />
  <DropShadowEffect x:Key="EffectShadow2" o:Freeze="True" BlurRadius="8" Direction="270" Opacity=".2" RenderingBias="Performance" ShadowDepth="1.5" Color="{StaticResource EffectShadowColor}" />
  <DropShadowEffect x:Key="EffectShadow3" o:Freeze="True" BlurRadius="14" Direction="270" Opacity=".2" RenderingBias="Performance" ShadowDepth="4.5" Color="{StaticResource EffectShadowColor}" />
  <DropShadowEffect x:Key="EffectShadow4" o:Freeze="True" BlurRadius="25" Direction="270" Opacity=".2" RenderingBias="Performance" ShadowDepth="8" Color="{StaticResource EffectShadowColor}" />
  <DropShadowEffect x:Key="EffectShadow5" o:Freeze="True" BlurRadius="35" Direction="270" Opacity=".2" RenderingBias="Performance" ShadowDepth="13" Color="{StaticResource EffectShadowColor}" />
  <Style x:Key="ButtonBaseStyle" TargetType="{x:Type Button}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Button}">
          <Grid x:Name="root" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
            <!--  main border, styling the border-brush and background for Normal state  -->
            <Border x:Name="normalBorder" Background="{TemplateBinding Background}" BorderBrush="{StaticResource ControlBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" />
            <!--  styling border-brush and background-color for MouseOver state  -->
            <Border x:Name="hoverBorder" BorderBrush="{DynamicResource ControlHoveredBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding ElementName=normalBorder, Path=CornerRadius}" Opacity="0" />
            <!--  styling border-brush and background-color for Focused state  -->
            <Border x:Name="focusBorder" BorderBrush="{DynamicResource ControlFocusedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding ElementName=normalBorder, Path=CornerRadius}" Opacity="0" />
            <ContentPresenter Margin="2" HorizontalAlignment="Stretch" VerticalAlignment="Center" TextElement.Foreground="{TemplateBinding Foreground}" />
            <!--  managing visual states to change controls styles on different states  -->
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlDisabledBackgroundColor}" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlDisabledBorderColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ReadOnly">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlReadOnlyBackgroundColor}" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlReadOnlyBorderColor}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="00:00:0.400" />
                    <Storyboard>
                      <ThicknessAnimation FillBehavior="HoldEnd" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="BorderThickness" From="1,1,1,1" To="2,2,2,2" Duration="00:00:0.400" />
                    </Storyboard>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource ControlDisabledForegroundBrush}" />
              <Setter Property="Background" Value="{DynamicResource ControlDisabledBackgroundBrush}" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="ContextMenuBaseStyle" TargetType="{x:Type ContextMenu}">
    <Setter Property="SnapsToDevicePixels" Value="True" />
    <Setter Property="OverridesDefaultStyle" Value="True" />
    <Setter Property="Grid.IsSharedSizeScope" Value="true" />
    <Setter Property="HasDropShadow" Value="True" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type ContextMenu}">
          <Border x:Name="Border" Margin="15" Background="{DynamicResource ControlBackgroundBrush}" BorderBrush="{DynamicResource ControlBorderBrush}" BorderThickness="1" CornerRadius="4" Effect="{DynamicResource EffectShadow2}">
            <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="HasDropShadow" Value="true">
              <Setter TargetName="Border" Property="Padding" Value="0,3,0,3" />
              <Setter TargetName="Border" Property="CornerRadius" Value="5" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource ButtonBaseStyle}" TargetType="{x:Type Button}" />
  <Style TargetType="Window">
    <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <Style x:Key="WindowWin10" TargetType="kt:Window">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="#262e2f" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="NonClientAreaBackground" Value="{DynamicResource RegionBrush}" />
    <Setter Property="NonClientAreaForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="CloseButtonBackground" Value="Transparent" />
    <Setter Property="CloseButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="CloseButtonHoverBackground" Value="#e81123" />
    <Setter Property="CloseButtonHoverForeground" Value="White" />
    <Setter Property="OtherButtonBackground" Value="Transparent" />
    <Setter Property="OtherButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="OtherButtonHoverBackground" Value="{DynamicResource LightBackgroundBrush}" />
    <Setter Property="OtherButtonHoverForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="kt:Window">
          <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True">
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
              </Grid.RowDefinitions>
              <Grid Name="PART_NonClientArea" Background="{TemplateBinding NonClientAreaBackground}" TextElement.Foreground="{TemplateBinding NonClientAreaForeground}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <StackPanel Name="ButtonPanel" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Top" Orientation="Horizontal" UseLayoutRounding="True" WindowChrome.IsHitTestVisibleInChrome="True">
                  <kt:WindowControlButton x:Name="ButtonMin" HorizontalAlignment="Right" Command="SystemCommands.MinimizeWindowCommand" Cursor="Arrow" FocusBrush="{StaticResource LightBackgroundBrush}" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                  <kt:WindowControlButton x:Name="ButtonMax" HorizontalAlignment="Right" Command="SystemCommands.MaximizeWindowCommand" Cursor="Arrow" FocusBrush="{StaticResource LightBackgroundBrush}" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                  <kt:WindowControlButton x:Name="ButtonRestore" HorizontalAlignment="Right" Command="SystemCommands.RestoreWindowCommand" Cursor="Arrow" FocusBrush="{StaticResource LightBackgroundBrush}" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                  <kt:WindowControlButton x:Name="ButtonClose" HorizontalAlignment="Right" Command="SystemCommands.CloseWindowCommand" Cursor="Arrow" FocusBrush="Red" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                </StackPanel>
                <Grid Grid.Column="0">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Button Name="ButtonIcon" Margin="10,0,0,0" VerticalAlignment="Center" Background="Transparent" Command="{x:Static SystemCommands.ShowSystemMenuCommand}" Visibility="{TemplateBinding Icon,&#xD;&#xA;                                                                     Converter={StaticResource Object2VisibilityConverter}}" WindowChrome.IsHitTestVisibleInChrome="True">
                    <Image Width="16" Height="16" VerticalAlignment="Center" IsHitTestVisible="False" Source="{TemplateBinding Icon}" />
                  </Button>
                  <TextBlock Grid.Column="1" Padding="10,0,0,0" VerticalAlignment="Center" Text="{TemplateBinding Title}">
                    <TextBlock.Visibility>
                      <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                        <MultiBinding.Bindings>
                          <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Converter="{StaticResource Object2BooleanConverter}" Path="Title" RelativeSource="{RelativeSource TemplatedParent}" />
                        </MultiBinding.Bindings>
                      </MultiBinding>
                    </TextBlock.Visibility>
                  </TextBlock>
                  <ContentPresenter x:Name="ContentPresenterMain" Grid.Column="2" Content="{TemplateBinding NonClientAreaContent}" WindowChrome.IsHitTestVisibleInChrome="True" />
                </Grid>
              </Grid>
              <AdornerDecorator Grid.Row="1">
                <ContentPresenter ClipToBounds="True" />
              </AdornerDecorator>
              <ResizeGrip x:Name="ResizeGrip" Grid.Row="1" Width="10" Height="10" HorizontalAlignment="Right" VerticalAlignment="Bottom" IsTabStop="False" Visibility="Collapsed" WindowChrome.ResizeGripDirection="BottomRight" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsActive" Value="False">
              <Setter TargetName="ContentPresenterMain" Property="Opacity" Value=".8" />
              <Setter TargetName="ButtonPanel" Property="Opacity" Value=".8" />
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter TargetName="ButtonMax" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ButtonRestore" Property="Visibility" Value="Visible" />
            </Trigger>
            <Trigger Property="WindowState" Value="Normal">
              <Setter TargetName="ButtonMax" Property="Visibility" Value="Visible" />
              <Setter TargetName="ButtonRestore" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="NoResize">
              <Setter TargetName="ButtonMin" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ButtonMax" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ButtonRestore" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="CanMinimize">
              <Setter TargetName="ButtonMax" Property="Visibility" Value="Collapsed" />
              <Setter TargetName="ButtonRestore" Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger SourceName="ButtonClose" Property="IsMouseOver" Value="True">
              <Setter TargetName="ButtonClose" Property="Background" Value="{Binding CloseButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="ButtonClose" Property="Foreground" Value="{Binding CloseButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger SourceName="ButtonMax" Property="IsMouseOver" Value="True">
              <Setter TargetName="ButtonMax" Property="Background" Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="ButtonMax" Property="Foreground" Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger SourceName="ButtonRestore" Property="IsMouseOver" Value="True">
              <Setter TargetName="ButtonRestore" Property="Background" Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="ButtonRestore" Property="Foreground" Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger SourceName="ButtonMin" Property="IsMouseOver" Value="True">
              <Setter TargetName="ButtonMin" Property="Background" Value="{Binding OtherButtonHoverBackground, RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter TargetName="ButtonMin" Property="Foreground" Value="{Binding OtherButtonHoverForeground, RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="WindowStyle" Value="None">
              <Setter Property="ShowNonClientArea" Value="False" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="GlowWindow" BasedOn="{StaticResource WindowWin10}" TargetType="kt:GlowWindow">
    <Setter Property="ActiveGlowColor" Value="{DynamicResource PrimaryColor}" />
    <Setter Property="InactiveGlowColor" Value="{DynamicResource ControlBorderColor}" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
  <Style x:Key="WindowBlur" BasedOn="{StaticResource WindowWin10}" TargetType="kt:BlurWindow">
    <Setter Property="Background" Value="Transparent" />
  </Style>
  <ContextMenu x:Key="DesignDefaultContextMenu" Style="{StaticResource ContextMenuBaseStyle}">
    <MenuItem Command="Cut" />
    <MenuItem Command="Copy" />
    <MenuItem Command="Paste" />
    <Separator />
    <MenuItem Command="SelectAll" />
  </ContextMenu>
  <Style TargetType="{x:Type MenuItem}">
    <Setter Property="FontSize" Value="12" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type MenuItem}">
          <Border x:Name="Bd" Uid="Border_38" Margin="10,5,10,5" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" CornerRadius="2" SnapsToDevicePixels="True">
            <ContentPresenter x:Name="ContentPresenter" Uid="ContentPresenter_33" Grid.Column="1" Margin="10,6,10,6" Content="{TemplateBinding Header}" TextElement.Foreground="{DynamicResource ControlForegroundBrush}" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{StaticResource ControlDisabledForegroundBrush}" />
            </Trigger>
            <Trigger Property="IsHighlighted" Value="True">
              <Setter TargetName="Bd" Property="Background" Value="{StaticResource PrimaryBrush}" />
              <Setter TargetName="Bd" Property="BorderBrush" Value="Transparent" />
              <Setter Property="Foreground" Value="White" />
              <Setter Property="Cursor" Value="Hand" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="TextBoxBaseStyle" TargetType="{x:Type TextBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Background">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource ControlBackgroundColor}" />
      </Setter.Value>
    </Setter>
    <Setter Property="Foreground">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource ControlForegroundColor}" />
      </Setter.Value>
    </Setter>
    <Setter Property="Padding" Value="5" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush">
      <Setter.Value>
        <SolidColorBrush Color="{DynamicResource ControlBorderColor}" />
      </Setter.Value>
    </Setter>
    <Setter Property="ContextMenu" Value="{StaticResource DesignDefaultContextMenu}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid x:Name="root" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
            <Border x:Name="normalBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" />
            <Border x:Name="hoverBorder" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding ElementName=normalBorder, Path=CornerRadius}" Opacity="0">
              <Border.Background>
                <SolidColorBrush Color="{DynamicResource ControlHoveredBackgroundColor}" />
              </Border.Background>
              <Border.BorderBrush>
                <SolidColorBrush Color="{DynamicResource PrimaryColor}" />
              </Border.BorderBrush>
            </Border>
            <Border x:Name="focusBorder" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding ElementName=normalBorder, Path=CornerRadius}" Opacity="0">
              <Border.BorderBrush>
                <SolidColorBrush Color="{DynamicResource PrimaryColor}" />
              </Border.BorderBrush>
            </Border>
            <ScrollViewer x:Name="PART_ContentHost" Margin="2" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Center" BorderThickness="0" IsTabStop="False" TextElement.Foreground="{TemplateBinding Foreground}" />
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.Background).Color" To="{DynamicResource ControlDisabledBackgroundColor}" Duration="0" />
                    <ColorAnimation Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.BorderBrush).Color" To="{DynamicResource ControlDisabledBorderColor}" Duration="0" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ReadOnly">
                  <Storyboard>
                    <ColorAnimation Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.Background).Color" To="{DynamicResource ControlReadOnlyBackgroundColor}" Duration="0" />
                    <ColorAnimation Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.BorderBrush).Color" To="{DynamicResource ControlReadOnlyBorderColor}" Duration="0" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="00:00:0.400" />
                    <Storyboard>
                      <ThicknessAnimation FillBehavior="HoldEnd" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="BorderThickness" From="1,1,1,1" To="2,2,2,2" Duration="00:00:0.400" />
                    </Storyboard>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlDisabledForegroundColor}" />
                </Setter.Value>
              </Setter>
              <Setter Property="Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlDisabledBackgroundColor}" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
              <Setter Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlReadOnlyForegroundColor}" />
                </Setter.Value>
              </Setter>
              <Setter Property="Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlReadOnlyBackgroundColor}" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}" />
</ResourceDictionary>