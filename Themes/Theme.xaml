<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:o="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options" xmlns:converter="clr-namespace:HandyControl.Tools.Converter" xmlns:themes="clr-namespace:Keytrap.Theme.Dark.Themes" xmlns:kt="clr-namespace:Keytrap.Theme.Dark.Controls" xmlns:interactivity="clr-namespace:HandyControl.Interactivity" xmlns:hc="clr-namespace:HandyControl.Controls">
  <converter:Boolean2BooleanReConverter x:Key="Boolean2BooleanReConverter" />
  <converter:Boolean2VisibilityReConverter x:Key="Boolean2VisibilityReConverter" />
  <converter:BooleanArr2VisibilityConverter x:Key="BooleanArr2VisibilityConverter" />
  <converter:String2VisibilityConverter x:Key="String2VisibilityConverter" />
  <converter:String2VisibilityReConverter x:Key="String2VisibilityReConverter" />
  <BooleanToVisibilityConverter x:Key="Boolean2VisibilityConverter" />
  <converter:TreeViewItemMarginConverter x:Key="TreeViewItemMarginConverter" />
  <converter:Color2HexStringConverter x:Key="Color2HexStringConverter" />
  <converter:Object2BooleanConverter x:Key="Object2BooleanConverter" />
  <converter:Boolean2StringConverter x:Key="Boolean2StringConverter" />
  <converter:Int2StringConverter x:Key="Int2StringConverter" />
  <converter:BorderClipConverter x:Key="BorderClipConverter" />
  <converter:BorderCircularClipConverter x:Key="BorderCircularClipConverter" />
  <converter:BorderCircularConverter x:Key="BorderCircularConverter" />
  <converter:Object2VisibilityConverter x:Key="Object2VisibilityConverter" />
  <converter:Object2VisibilityReConverter x:Key="Object2VisibilityReConverter" />
  <converter:RectangleCircularConverter x:Key="RectangleCircularConverter" />
  <converter:ThicknessSplitConverter x:Key="ThicknessSplitConverter" />
  <converter:CornerRadiusSplitConverter x:Key="CornerRadiusSplitConverter" />
  <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
  <converter:Double2GridLengthConverter x:Key="Double2GridLengthConverter" />
  <converter:DoubleMinConverter x:Key="DoubleMinConverter" />
  <converter:Object2StringConverter x:Key="Object2StringConverter" />
  <SolidColorBrush x:Key="LightPrimaryBrush" o:Freeze="True" Color="{DynamicResource PrimaryLightColor}" />
  <SolidColorBrush x:Key="PrimaryBrush" o:Freeze="True" Color="{DynamicResource PrimaryColor}" />
  <SolidColorBrush x:Key="DarkPrimaryBrush" o:Freeze="True" Color="{DynamicResource PrimaryDarkColor}" />
  <SolidColorBrush x:Key="LightSuccessBrush" o:Freeze="True" Color="{DynamicResource SuccessLightColor}" />
  <SolidColorBrush x:Key="SuccessBrush" o:Freeze="True" Color="{DynamicResource SuccessColor}" />
  <SolidColorBrush x:Key="DarkSuccessBrush" o:Freeze="True" Color="{DynamicResource SuccessDarkColor}" />
  <SolidColorBrush x:Key="LightInfoBrush" o:Freeze="True" Color="{DynamicResource InfoLightColor}" />
  <SolidColorBrush x:Key="InfoBrush" o:Freeze="True" Color="{DynamicResource InfoColor}" />
  <SolidColorBrush x:Key="DarkInfoBrush" o:Freeze="True" Color="{DynamicResource InfoDarkColor}" />
  <SolidColorBrush x:Key="LightErrorBrush" o:Freeze="True" Color="{DynamicResource ErrorLightColor}" />
  <SolidColorBrush x:Key="ErrorBrush" o:Freeze="True" Color="{DynamicResource ErrorColor}" />
  <SolidColorBrush x:Key="DarkErrorBrush" o:Freeze="True" Color="{DynamicResource ErrorDarkColor}" />
  <SolidColorBrush x:Key="LightWarningBrush" o:Freeze="True" Color="{DynamicResource WarningLightColor}" />
  <SolidColorBrush x:Key="WarningBrush" o:Freeze="True" Color="{DynamicResource WarningColor}" />
  <SolidColorBrush x:Key="DarkWarningBrush" o:Freeze="True" Color="{DynamicResource WarningDarkColor}" />
  <SolidColorBrush x:Key="PrimaryTextBrush" o:Freeze="True" Color="{DynamicResource PrimaryTextColor}" />
  <SolidColorBrush x:Key="SecondaryTextBrush" o:Freeze="True" Color="{DynamicResource SecondaryTextColor}" />
  <SolidColorBrush x:Key="ThirdlyTextBrush" o:Freeze="True" Color="{DynamicResource ThirdlyTextColor}" />
  <SolidColorBrush x:Key="LightBackgroundBrush" o:Freeze="True" Color="{DynamicResource BackgroundLightColor}" />
  <SolidColorBrush x:Key="BackgroundBrush" o:Freeze="True" Color="{DynamicResource BackgroundColor}" />
  <SolidColorBrush x:Key="DarkBackgroundBrush" o:Freeze="True" Color="{DynamicResource BackgroundDarkColor}" />
  <SolidColorBrush x:Key="ControlBorderBrush" o:Freeze="True" Color="{DynamicResource ControlBorderColor}" />
  <SolidColorBrush x:Key="ControlDisabledBorderBrush" o:Freeze="True" Color="{DynamicResource ControlDisabledBorderColor}" />
  <SolidColorBrush x:Key="ControlReadOnlyBorderBrush" o:Freeze="True" Color="{DynamicResource ControlReadOnlyBorderColor}" />
  <SolidColorBrush x:Key="ControlHoveredBorderBrush" o:Freeze="True" Color="{DynamicResource ControlHoveredBorderColor}" />
  <SolidColorBrush x:Key="ControlFocusedBorderBrush" o:Freeze="True" Color="{DynamicResource ControlFocusedBorderColor}" />
  <SolidColorBrush x:Key="ControlForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlForegroundColor}" />
  <SolidColorBrush x:Key="ControlDisabledForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlDisabledForegroundColor}" />
  <SolidColorBrush x:Key="ControlReadOnlyForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlReadOnlyForegroundColor}" />
  <SolidColorBrush x:Key="ControlHoveredForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlHoveredForegroundColor}" />
  <SolidColorBrush x:Key="ControlFocusedForegroundBrush" o:Freeze="True" Color="{DynamicResource ControlFocusedForegroundColor}" />
  <SolidColorBrush x:Key="ControlBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlBackgroundColor}" />
  <SolidColorBrush x:Key="ControlDisabledBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlDisabledBackgroundColor}" />
  <SolidColorBrush x:Key="ControlReadOnlyBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlReadOnlyBackgroundColor}" />
  <SolidColorBrush x:Key="ControlHoveredBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlHoveredBackgroundColor}" />
  <SolidColorBrush x:Key="ControlFocusedBackgroundBrush" o:Freeze="True" Color="{DynamicResource ControlFocusedBackgroundColor}" />
  <Style x:Key="TextBoxBaseStyle" TargetType="{x:Type TextBox}">
    <Setter Property="SnapsToDevicePixels" Value="true" />
    <Setter Property="OverridesDefaultStyle" Value="true" />
    <Setter Property="Background" Value="{DynamicResource ControlBackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
    <Setter Property="Padding" Value="5" />
    <Setter Property="HorizontalAlignment" Value="Stretch" />
    <Setter Property="HorizontalContentAlignment" Value="Left" />
    <Setter Property="VerticalAlignment" Value="Stretch" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource ControlBorderBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type TextBox}">
          <Grid x:Name="root" Width="{TemplateBinding Width}" Height="{TemplateBinding Height}">
            <!--  main border, styling the border-brush and background for Normal state  -->
            <Border x:Name="normalBorder" Background="{TemplateBinding Background}" BorderBrush="{StaticResource ControlBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="4" />
            <!--  styling border-brush and background-color for MouseOver state  -->
            <Border x:Name="hoverBorder" BorderBrush="{DynamicResource ControlHoveredBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding ElementName=normalBorder, Path=CornerRadius}" Opacity="0" />
            <!--  styling border-brush and background-color for Focused state  -->
            <Border x:Name="focusBorder" BorderBrush="{DynamicResource ControlFocusedBorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="{Binding ElementName=normalBorder, Path=CornerRadius}" Opacity="0" />
            <!--  TextBox uses a ScrollViewer named PART_ContentHost as its content-presenter  -->
            <ScrollViewer x:Name="PART_ContentHost" Margin="2" Padding="{TemplateBinding Padding}" HorizontalAlignment="Stretch" VerticalAlignment="Center" BorderThickness="0" IsTabStop="False" TextElement.Foreground="{TemplateBinding Foreground}" />
            <!--  managing visual states to change controls styles on different states  -->
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="hoverBorder" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Disabled">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlDisabledBackgroundBrush}" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlDisabledBorderBrush}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="ReadOnly">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.Background).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlReadOnlyBackgroundBrush}" />
                    </ColorAnimationUsingKeyFrames>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="normalBorder" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0" Value="{DynamicResource ControlReadOnlyBorderBrush}" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
              <VisualStateGroup x:Name="FocusStates">
                <VisualState x:Name="Focused">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="00:00:00.200" />
                    <Storyboard>
                      <ThicknessAnimation FillBehavior="HoldEnd" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="BorderThickness" From="1,1,1,1" To="2,2,2,2" Duration="00:00:00.300" />
                    </Storyboard>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Unfocused">
                  <Storyboard>
                    <DoubleAnimation BeginTime="00:00:00.000" Storyboard.TargetName="focusBorder" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="00:00:00.200" />
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlDisabledForegroundBrush}" />
                </Setter.Value>
              </Setter>
              <Setter Property="Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlDisabledBackgroundBrush}" />
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsReadOnly" Value="True">
              <Setter Property="Foreground">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlReadOnlyForegroundBrush}" />
                </Setter.Value>
              </Setter>
              <Setter Property="Background">
                <Setter.Value>
                  <SolidColorBrush Color="{DynamicResource ControlReadOnlyBackgroundBrush}" />
                </Setter.Value>
              </Setter>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style BasedOn="{StaticResource TextBoxBaseStyle}" TargetType="{x:Type TextBox}" />
  <Style TargetType="Window">
    <Setter Property="Background" Value="{DynamicResource SecondaryRegionBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="UseLayoutRounding" Value="True" />
  </Style>
  <Style x:Key="WindowWin10" TargetType="kt:Window">
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="#262e2f" />
    <Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource ControlForegroundBrush}" />
    <Setter Property="UseLayoutRounding" Value="True" />
    <Setter Property="NonClientAreaBackground" Value="{DynamicResource RegionBrush}" />
    <Setter Property="NonClientAreaForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="CloseButtonBackground" Value="Transparent" />
    <Setter Property="CloseButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="CloseButtonHoverBackground" Value="#e81123" />
    <Setter Property="CloseButtonHoverForeground" Value="White" />
    <Setter Property="OtherButtonBackground" Value="Transparent" />
    <Setter Property="OtherButtonForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="OtherButtonHoverBackground" Value="{DynamicResource LightBackgroundBrush}" />
    <Setter Property="OtherButtonHoverForeground" Value="{DynamicResource PrimaryTextBrush}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="kt:Window">
          <Border SnapsToDevicePixels="True" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
            <Grid Margin="{TemplateBinding Padding}">
              <Grid.RowDefinitions>
                <RowDefinition Height="Auto" />
                <RowDefinition />
              </Grid.RowDefinitions>
              <Grid Background="{TemplateBinding NonClientAreaBackground}" Name="PART_NonClientArea" TextElement.Foreground="{TemplateBinding NonClientAreaForeground}">
                <Grid.ColumnDefinitions>
                  <ColumnDefinition />
                  <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>
                <StackPanel Name="ButtonPanel" WindowChrome.IsHitTestVisibleInChrome="True" UseLayoutRounding="True" VerticalAlignment="Top" Grid.Column="1" HorizontalAlignment="Right" Orientation="Horizontal">
                  <kt:WindowControlButton x:Name="ButtonMin" HorizontalAlignment="Right" Cursor="Arrow" Command="SystemCommands.MinimizeWindowCommand" FocusBrush="{StaticResource LightBackgroundBrush}" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                  <kt:WindowControlButton x:Name="ButtonMax" HorizontalAlignment="Right" Cursor="Arrow" Command="SystemCommands.MaximizeWindowCommand" FocusBrush="{StaticResource LightBackgroundBrush}" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                  <kt:WindowControlButton x:Name="ButtonRestore" HorizontalAlignment="Right" Cursor="Arrow" Command="SystemCommands.RestoreWindowCommand" FocusBrush="{StaticResource LightBackgroundBrush}" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                  <kt:WindowControlButton x:Name="ButtonClose" HorizontalAlignment="Right" Cursor="Arrow" Command="SystemCommands.CloseWindowCommand" FocusBrush="Red" FontFamily="Segoe MDL2 Assets" FontSize="10" Foreground="{StaticResource ControlForegroundBrush}" Text="" />
                </StackPanel>
                <Grid Grid.Column="0">
                  <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition />
                  </Grid.ColumnDefinitions>
                  <Button Name="ButtonIcon" Visibility="{TemplateBinding Icon,Converter={StaticResource Object2VisibilityConverter}}" Command="{x:Static SystemCommands.ShowSystemMenuCommand}" Background="Transparent" Margin="10,0,0,0" WindowChrome.IsHitTestVisibleInChrome="True" VerticalAlignment="Center">
                    <interactivity:Interaction.Triggers>
                      <interactivity:EventTrigger EventName="MouseDoubleClick">
                        <interactivity:InvokeCommandAction Command="{x:Static SystemCommands.CloseWindowCommand}" />
                      </interactivity:EventTrigger>
                    </interactivity:Interaction.Triggers>
                    <Image IsHitTestVisible="False" Source="{TemplateBinding Icon}" VerticalAlignment="Center" Width="16" Height="16" />
                  </Button>
                  <TextBlock Grid.Column="1" Text="{TemplateBinding Title}" Padding="10,0,0,0" VerticalAlignment="Center">
                    <TextBlock.Visibility>
                      <MultiBinding Converter="{StaticResource BooleanArr2VisibilityConverter}">
                        <MultiBinding.Bindings>
                          <Binding Path="ShowTitle" RelativeSource="{RelativeSource TemplatedParent}" />
                          <Binding Path="Title" RelativeSource="{RelativeSource TemplatedParent}" Converter="{StaticResource Object2BooleanConverter}" />
                        </MultiBinding.Bindings>
                      </MultiBinding>
                    </TextBlock.Visibility>
                  </TextBlock>
                  <ContentPresenter WindowChrome.IsHitTestVisibleInChrome="True" Grid.Column="2" x:Name="ContentPresenterMain" Content="{TemplateBinding NonClientAreaContent}" />
                </Grid>
              </Grid>
              <AdornerDecorator Grid.Row="1">
                <ContentPresenter ClipToBounds="True" />
              </AdornerDecorator>
              <ResizeGrip Width="10" Height="10" x:Name="ResizeGrip" HorizontalAlignment="Right" VerticalAlignment="Bottom" Grid.Row="1" IsTabStop="False" Visibility="Collapsed" WindowChrome.ResizeGripDirection="BottomRight" />
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsActive" Value="False">
              <Setter Property="Opacity" Value=".8" TargetName="ContentPresenterMain" />
              <Setter Property="Opacity" Value=".8" TargetName="ButtonPanel" />
            </Trigger>
            <Trigger Property="WindowState" Value="Maximized">
              <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMax" />
              <Setter Property="Visibility" Value="Visible" TargetName="ButtonRestore" />
            </Trigger>
            <Trigger Property="WindowState" Value="Normal">
              <Setter Property="Visibility" Value="Visible" TargetName="ButtonMax" />
              <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonRestore" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="NoResize">
              <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMin" />
              <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMax" />
              <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonRestore" />
            </Trigger>
            <Trigger Property="ResizeMode" Value="CanMinimize">
              <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonMax" />
              <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonRestore" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="ButtonClose">
              <Setter Property="Background" TargetName="ButtonClose" Value="{Binding CloseButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter Property="Foreground" TargetName="ButtonClose" Value="{Binding CloseButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="ButtonMax">
              <Setter Property="Background" TargetName="ButtonMax" Value="{Binding OtherButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter Property="Foreground" TargetName="ButtonMax" Value="{Binding OtherButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="ButtonRestore">
              <Setter Property="Background" TargetName="ButtonRestore" Value="{Binding OtherButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter Property="Foreground" TargetName="ButtonRestore" Value="{Binding OtherButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True" SourceName="ButtonMin">
              <Setter Property="Background" TargetName="ButtonMin" Value="{Binding OtherButtonHoverBackground,RelativeSource={RelativeSource TemplatedParent}}" />
              <Setter Property="Foreground" TargetName="ButtonMin" Value="{Binding OtherButtonHoverForeground,RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
            <Trigger Property="WindowStyle" Value="None">
              <Setter Property="ShowNonClientArea" Value="False" />
            </Trigger>
            <MultiTrigger>
              <MultiTrigger.Conditions>
                <Condition Property="ResizeMode" Value="CanResizeWithGrip" />
                <Condition Property="WindowState" Value="Normal" />
              </MultiTrigger.Conditions>
              <Setter TargetName="ResizeGrip" Property="Visibility" Value="Visible" />
            </MultiTrigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style x:Key="WindowGlow" BasedOn="{StaticResource WindowWin10}" TargetType="hc:GlowWindow">
    <Setter Property="ActiveGlowColor" Value="{DynamicResource PrimaryColor}" />
    <Setter Property="InactiveGlowColor" Value="{DynamicResource ControlDisabledForegroundColor}" />
    <Setter Property="BorderThickness" Value="0" />
  </Style>
</ResourceDictionary>